install.packages("car")
install.packages("ggplot2")
# lab1 - part2
EPI = read.csv("EPI_data.csv", header = TRUE )
plot(ecdf(EPI), do.points = FALSE, verticals = TRUE )
plot(ecdf(EPI), do.points = FALSE, verticals = TRUE )
View(EPI)
View(EPI)
qqplot(qt(ppoint(250), df = 5, x, xlab = "QQ plot for tdsn"))
# Quantile-Quantile
help("qqnorm")
# Exercises:
# read in csv
df <- read.csv("./GPW3_GRUMP_SummaryInformation_2010.csv", header = TRUE )
# plot some variable
plot(df$CountryEnglish)
plot(df$ContinentName)
data()
help(data)
#or EPI_data <- read.xlsx( <path>/2010EPI_data.xlsx")
# Note: replace default data frame name cannot start with numbers!
View(EPI_data)
EPI_data <- read.csv( "./2010EPI_data.csv")
EPI_data <- read.csv( "./2010EPI_data.csv")
pwd
pwd()
wd()
attach(EPI_data) 	# sets the default object
h
require(utils)
attach(EPI_data) 	# sets the default object
h
EPI 			# prints out values EPI_data$EPI
View(EPI)
EPI_data <- read.csv( "./2010EPI_data.csv")
require(utils)
attach(EPI_data) 	# sets the default object
h
EPI 			# prints out values EPI_data$EPI
detach("EPI_data")
attach(EPI_data) 	# sets the default object
h
help("utils")
install.packages("utils")
install.packages("utils")
install.packages("utils")
install.packages("utils")
install.packages("utils")
update("utils")
install.packages(c("alr3", "aod", "assertthat", "bdsmatrix", "BH", "boot", "chron", "class", "cluster", "coda", "codetools", "colorspace", "cubature", "curl", "data.table", "digest", "DistributionUtils", "expm", "fastICA", "fGarch", "FNN", "foreign", "Formula", "GeneralizedHyperbolic", "GGally", "ggthemes", "gplots", "gss", "gtable", "gtools", "highr", "htmltools", "htmlwidgets", "httpuv", "igraph", "inum", "kernlab", "KernSmooth", "ks", "later", "lattice", "lazyeval", "leaps", "libcoin", "lme4", "lmtest", "markdown", "MASS", "Matrix", "maxLik", "mclust", "mgcv", "mime", "miscTools", "multicool", "munsell", "nlme", "nloptr", "NLP", "np", "numDeriv", "openssl", "pander", "partykit", "pbapply", "pkgconfig", "plm", "plyr", "prettyunits", "progress", "promises", "quadprog", "quantmod", "quantreg", "R6", "RcppArmadillo", "RcppEigen", "reshape", "ResourceSelection", "rgl", "rJava", "rlang", "robustbase", "rpart", "rugarch", "RUnit", "sandwich", "scales", "selectr", "shiny", "SkewHyperbolic", "slam", "SparseM", "stringi", "survival", "tidyselect", "timeSeries", "tm", "tseries", "TTR", "utf8", "vctrs", "webshot", "xlsx", "xtable", "xts", "zoo"))
install.packages("plotrix")
install.packages("rmarkdown")
tinytex::install_tinytex()
tinytex::tlmgr_install("pdfcrop")
# DATA VISUALIZATION
library(tidyverse)
update.packages("readr")
-- fff
# help
?mpg
disp(mpg)
displ(mpg)
mpg.displ
mpg$displ
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) + geom_point(mapping = aes(x = cyl, y = hwy))
row_number(mpg)
row_number(mpg[,1])
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = class))
ggplot(data = mpg) + geom_point(mapping = aes(x = cyl, y = hwy, color = class))
mpg$class
unique(unimpg$class)
unique.array(unimpg$class)
col_number(mpg[1,])
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 2)
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_grid(drv ~ cyl)
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, shape = class))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, size = class))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, alpha = class)
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = class))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = class)
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = class))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = class))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, alpha = class))
You can also set the aesthetic properties of your geom manually. For example, we can make all of the points in our plot blue:
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), color = "blue")
?mpg # mpg is a data frame in ggplot2
printf(mpg$trans)
print(mpg$trans)
print(mpg$drv)
print(mpg$dty)
print(mpg$cty)
# map a continuous variable to color
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = cty))
https://r4ds.had.co.nz/data-visualisation.html
unlink('R_for_Data_Science/data_visualization_cache', recursive = TRUE)
knitr::opts_chunk$set(echo = TRUE)
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = class, shape = class))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = class, alpha = class))
```r
?mpg
```
mpg$displ --> a car's engine size (in litres)
mpg$hwy --> a car's fuel efficiency on the higway (measured in miles per gallon (mpg)). The lower, the worser.
```r
?mpg
```
displ: a car's engine size (in litres)
hwy: a car's fuel efficiency on the higway (measured in miles per gallon (mpg)). The lower, the worser.
```r
?mpg
```
displ means a car's engine size (in litres)
hwy means a car's fuel efficiency on the higway (measured in miles per gallon (mpg)). The lower, the worser.
```{r}
?mpg
```r
?mpg
# mpg$displ means a car's engine size (in litres)
# mpg$hwy means a car's fuel efficiency on the higway (measured in miles per gallon (mpg)). The lower, the worser.
```
+
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = cty))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = cty))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, size = cty))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, shape = cty))
What does the `r stroke` aesthetic do? What shapes does it work with? (Hint: use ?geom_point)
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, stroke = class))
What does the `r stroke` aesthetic do? What shapes does it work with? (Hint: use ?geom_point)
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, stroke = cty))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, stroke = cty))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, stroke = cty))
?geom_point
What happens if you map an aesthetic to something other than a variable name, like aes(colour = displ < 5)? Note, you’ll also need to specify x and y.
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, stroke = cty))
What happens if you map an aesthetic to something other than a variable name, like aes(colour = displ < 5)? Note, you’ll also need to specify x and y.
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, stroke = class))
What happens if you map an aesthetic to something other than a variable name, like aes(colour = displ < 5)? Note, you’ll also need to specify x and y.
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = class))
What happens if you map an aesthetic to something other than a variable name, like aes(colour = displ < 5)? Note, you’ll also need to specify x and y.
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = displ < 5))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = displ < 5))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = displ < 5))
You complete your graph by adding (+) one or more layers to ggplot(). The function geom_point() adds a layer of points to your plot, i.e. geom_point() creates a scatterplot. Each geom function in ggplot2 takes a mapping argument, which defines how variables in your dataset are mapped to visual properties.
complete your graph by adding (+) one or more layers to ggplot(). The function geom_point() adds a layer of points to your plot, i.e. geom_point() creates a scatterplot. Each geom function in ggplot2 takes a mapping argument, which defines how variables in your dataset are mapped to visual properties.
complete your graph by adding (+) one or more layers to ggplot(). The function geom_point() adds a layer of points to your plot, i.e. geom_point() creates a scatterplot. Each geom function in ggplot2 takes a mapping argument, which defines how variables in your dataset are mapped to visual properties.
complete your graph by adding (+) one or more layers to ggplot(). The function geom_point() adds a layer of points to your plot, i.e. geom_point() creates a scatterplot. Each geom function in ggplot2 takes a mapping argument, which defines how variables in your dataset are mapped to visual properties.
complete your graph by adding (+) one or more layers to ggplot(). The function geom_point() adds a layer of points to your plot, i.e. geom_point() creates a scatterplot. Each geom function in ggplot2 takes a mapping argument, which defines how variables in your dataset are mapped to visual properties.
ggplot() creates a coordinate system that you can add layers to. The first argument of ggplot() is the dataset to use in the graph.
# Chapter 3, Bar-Graphs, R Graphics cookbook.
# You have a data frame where one column represents the x position of each bar, and
# another column represents the vertical (y) height of each bar.
library(gcookbook) # for the dataset. pg_mean dataset is avialbe in this library.
install.packages("gcookbook")
# Chapter 3, Bar-Graphs, R Graphics cookbook.
# You have a data frame where one column represents the x position of each bar, and
# another column represents the vertical (y) height of each bar.
library(gcookbook) # for the dataset. pg_mean dataset is avialbe in this library.
install.packages("installr")
