EPI_data <- read.csv( "./2010EPI_data.csv")
pwd
pwd()
wd()
attach(EPI_data) 	# sets the default object
h
require(utils)
attach(EPI_data) 	# sets the default object
h
EPI 			# prints out values EPI_data$EPI
View(EPI)
EPI_data <- read.csv( "./2010EPI_data.csv")
require(utils)
attach(EPI_data) 	# sets the default object
h
EPI 			# prints out values EPI_data$EPI
detach("EPI_data")
attach(EPI_data) 	# sets the default object
h
help("utils")
install.packages("utils")
install.packages("utils")
install.packages("utils")
install.packages("utils")
install.packages("utils")
update("utils")
install.packages(c("alr3", "aod", "assertthat", "bdsmatrix", "BH", "boot", "chron", "class", "cluster", "coda", "codetools", "colorspace", "cubature", "curl", "data.table", "digest", "DistributionUtils", "expm", "fastICA", "fGarch", "FNN", "foreign", "Formula", "GeneralizedHyperbolic", "GGally", "ggthemes", "gplots", "gss", "gtable", "gtools", "highr", "htmltools", "htmlwidgets", "httpuv", "igraph", "inum", "kernlab", "KernSmooth", "ks", "later", "lattice", "lazyeval", "leaps", "libcoin", "lme4", "lmtest", "markdown", "MASS", "Matrix", "maxLik", "mclust", "mgcv", "mime", "miscTools", "multicool", "munsell", "nlme", "nloptr", "NLP", "np", "numDeriv", "openssl", "pander", "partykit", "pbapply", "pkgconfig", "plm", "plyr", "prettyunits", "progress", "promises", "quadprog", "quantmod", "quantreg", "R6", "RcppArmadillo", "RcppEigen", "reshape", "ResourceSelection", "rgl", "rJava", "rlang", "robustbase", "rpart", "rugarch", "RUnit", "sandwich", "scales", "selectr", "shiny", "SkewHyperbolic", "slam", "SparseM", "stringi", "survival", "tidyselect", "timeSeries", "tm", "tseries", "TTR", "utf8", "vctrs", "webshot", "xlsx", "xtable", "xts", "zoo"))
install.packages("plotrix")
install.packages("rmarkdown")
tinytex::install_tinytex()
tinytex::tlmgr_install("pdfcrop")
# DATA VISUALIZATION
library(tidyverse)
update.packages("readr")
-- fff
# help
?mpg
disp(mpg)
displ(mpg)
mpg.displ
mpg$displ
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) + geom_point(mapping = aes(x = cyl, y = hwy))
row_number(mpg)
row_number(mpg[,1])
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = class))
ggplot(data = mpg) + geom_point(mapping = aes(x = cyl, y = hwy, color = class))
mpg$class
unique(unimpg$class)
unique.array(unimpg$class)
col_number(mpg[1,])
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 2)
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_grid(drv ~ cyl)
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, shape = class))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, size = class))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, alpha = class)
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = class))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = class)
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = class))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = class))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, alpha = class))
You can also set the aesthetic properties of your geom manually. For example, we can make all of the points in our plot blue:
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), color = "blue")
?mpg # mpg is a data frame in ggplot2
printf(mpg$trans)
print(mpg$trans)
print(mpg$drv)
print(mpg$dty)
print(mpg$cty)
# map a continuous variable to color
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = cty))
https://r4ds.had.co.nz/data-visualisation.html
unlink('R_for_Data_Science/data_visualization_cache', recursive = TRUE)
knitr::opts_chunk$set(echo = TRUE)
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = class, shape = class))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = class, alpha = class))
```r
?mpg
```
mpg$displ --> a car's engine size (in litres)
mpg$hwy --> a car's fuel efficiency on the higway (measured in miles per gallon (mpg)). The lower, the worser.
```r
?mpg
```
displ: a car's engine size (in litres)
hwy: a car's fuel efficiency on the higway (measured in miles per gallon (mpg)). The lower, the worser.
```r
?mpg
```
displ means a car's engine size (in litres)
hwy means a car's fuel efficiency on the higway (measured in miles per gallon (mpg)). The lower, the worser.
```{r}
?mpg
```r
?mpg
# mpg$displ means a car's engine size (in litres)
# mpg$hwy means a car's fuel efficiency on the higway (measured in miles per gallon (mpg)). The lower, the worser.
```
+
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = cty))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = cty))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, size = cty))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, shape = cty))
What does the `r stroke` aesthetic do? What shapes does it work with? (Hint: use ?geom_point)
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, stroke = class))
What does the `r stroke` aesthetic do? What shapes does it work with? (Hint: use ?geom_point)
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, stroke = cty))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, stroke = cty))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, stroke = cty))
?geom_point
What happens if you map an aesthetic to something other than a variable name, like aes(colour = displ < 5)? Note, you’ll also need to specify x and y.
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, stroke = cty))
What happens if you map an aesthetic to something other than a variable name, like aes(colour = displ < 5)? Note, you’ll also need to specify x and y.
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, stroke = class))
What happens if you map an aesthetic to something other than a variable name, like aes(colour = displ < 5)? Note, you’ll also need to specify x and y.
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = class))
What happens if you map an aesthetic to something other than a variable name, like aes(colour = displ < 5)? Note, you’ll also need to specify x and y.
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = displ < 5))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = displ < 5))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = displ < 5))
You complete your graph by adding (+) one or more layers to ggplot(). The function geom_point() adds a layer of points to your plot, i.e. geom_point() creates a scatterplot. Each geom function in ggplot2 takes a mapping argument, which defines how variables in your dataset are mapped to visual properties.
complete your graph by adding (+) one or more layers to ggplot(). The function geom_point() adds a layer of points to your plot, i.e. geom_point() creates a scatterplot. Each geom function in ggplot2 takes a mapping argument, which defines how variables in your dataset are mapped to visual properties.
complete your graph by adding (+) one or more layers to ggplot(). The function geom_point() adds a layer of points to your plot, i.e. geom_point() creates a scatterplot. Each geom function in ggplot2 takes a mapping argument, which defines how variables in your dataset are mapped to visual properties.
complete your graph by adding (+) one or more layers to ggplot(). The function geom_point() adds a layer of points to your plot, i.e. geom_point() creates a scatterplot. Each geom function in ggplot2 takes a mapping argument, which defines how variables in your dataset are mapped to visual properties.
complete your graph by adding (+) one or more layers to ggplot(). The function geom_point() adds a layer of points to your plot, i.e. geom_point() creates a scatterplot. Each geom function in ggplot2 takes a mapping argument, which defines how variables in your dataset are mapped to visual properties.
ggplot() creates a coordinate system that you can add layers to. The first argument of ggplot() is the dataset to use in the graph.
# Chapter 3, Bar-Graphs, R Graphics cookbook.
# You have a data frame where one column represents the x position of each bar, and
# another column represents the vertical (y) height of each bar.
library(gcookbook) # for the dataset. pg_mean dataset is avialbe in this library.
install.packages("gcookbook")
# Chapter 3, Bar-Graphs, R Graphics cookbook.
# You have a data frame where one column represents the x position of each bar, and
# another column represents the vertical (y) height of each bar.
library(gcookbook) # for the dataset. pg_mean dataset is avialbe in this library.
install.packages("installr")
# Kmeans
data("iris")
# (2) kNN
abalone <- read_csv( "abalone.csv" )
# (2) kNN
abalone <- read.csv( "abalone.csv" )
setwd("~/Documents/GitHub/DataAnalyticsSpring2020/lab2")
# (2) kNN
abalone <- read.csv( "abalone.csv" )
is.factor(abalone$Sex)
library( knitr )
kable( abalone[1:10,], digits = 4, format = "markdown" )
ggpairs(abalone, aes(colour = Sex, alpha = 0.8), title="Pairs plot for abalone dataset") +
theme_grey(base_size = 8)
library(tidyverse)
library(dplyr) # sample_n(), sample_frac(), arrang(), summerise(), %>% (pipe) (ref: https://datacarpentry.org/R-genomics/04-dplyr.html)
attach(data)
ggpairs(abalone, aes(colour = Sex, alpha = 0.8), title="Pairs plot for abalone dataset") +
theme_grey(base_size = 8)
ggpairs(abalone, aes(colour = Sex, alpha = 0.8), title="Pairs plot for abalone dataset") +
theme_grey(base_size = 8)
setwd("~/Documents/GitHub/DataAnalyticsSpring2020/lab2") # reference: https://support.rstudio.com/hc/en-us/articles/200711843-Working-Directories-and-Workspaces
library(tidyverse)
library(dplyr) # sample_n(), sample_frac(), arrang(), summerise(), %>% (pipe) (ref: https://datacarpentry.org/R-genomics/04-dplyr.html)
# 2a - Measures of Central Tendency/Histograms/ Data Manipulation:
data <- read_csv("EPI_data.csv")
data %>% glimpse()
# (0) summary ==> shows the mean, median, and quantiles for numeric variables in a data frame
summary(EPI)
summary(DALY)
attach(data)
# (0) summary ==> shows the mean, median, and quantiles for numeric variables in a data frame
summary(EPI)
summary(DALY)
# (1) sample_n() ==> pick random number of rows that we wish to choose:
sample_n(EPI, 5) # random 5 rows
sample_n(DALY, 5) # random 5 rows
library(tidyverse)
library(dplyr) # sample_n(), sample_frac(), arrang(), summerise(), %>% (pipe) (ref: https://datacarpentry.org/R-genomics/04-dplyr.html)
# 2a - Measures of Central Tendency/Histograms/ Data Manipulation:
data <- read_csv("EPI_data.csv")
# 2a - Measures of Central Tendency/Histograms/ Data Manipulation:
data <- read_csv("EPI_data.csv")
data %>% glimpse()
attach(data)
# (0) summary ==> shows the mean, median, and quantiles for numeric variables in a data frame
summary(EPI)
summary(DALY)
# (1) sample_n() ==> pick random number of rows that we wish to choose:
sample_n(EPI, 5) # random 5 rows
sample_n(DALY, 5) # random 5 rows
# (2) sample_frac() ==> pick a percentage of rows
sample_frac(EPI, 0.1) # sample with a 10% of rows from the total number of rows
sample_frac(DALY, 0.1) ) # sample with a 10% of rows from the total number of rows
# (3) arrange() ==> arrange values in the descending order and assign them to a new variables
?arrange
arrange( EPI, desc(EPI) )
library(readr)
library(car)
library(lmtest)
library(ggplot2)
library(GGally)
library(gridExtra)
library(MASS)
library(leaps)
library(glmnet)
library(caret)
library(gbm)
library(tidyverse)
library(dplyr) # sample_n(), sample_frac(), arrang(), summerise(), %>% (pipe) (ref: https://datacarpentry.org/R-genomics/04-dplyr.html)
# 2a - Measures of Central Tendency/Histograms/ Data Manipulation:
data <- read_csv("EPI_data.csv")
setwd("~/Documents/GitHub/DataAnalyticsSpring2020/lab2") # reference: https://support.rstudio.com/hc/en-us/articles/200711843-Working-Directories-and-Workspaces
# 2a - Measures of Central Tendency/Histograms/ Data Manipulation:
data <- read_csv("EPI_data.csv")
data %>% glimpse()
attach(data)
# (0) summary ==> shows the mean, median, and quantiles for numeric variables in a data frame
summary(EPI)
summary(DALY)
# (1) sample_n() ==> pick random number of rows that we wish to choose:
sample_n(EPI, 5) # random 5 rows
type(EPI)
class(EPI)
EPI %>% glimpse
# (1) sample_n() ==> pick random number of rows that we wish to choose:
# random 5 rows
sample_n(EPI, 5)
# sample_n() in dplyr
# sample_n() function allows us to pick random number of rows that we wish to choose:
sample_n(flights, 15) # random 15 rows.
library(dplyr)
# You will see: **The following objects are masked from ‘package:stats’: filter, lag **
# This is becasue dplyr will have it's own filter() function and lag() function which is different from the usual filter function that come with the Base R package.
library(nycflights13)
# We will be using the NYC 2013 flights data during this examples, first install the package
install.packages('nycflights13')
library(dplyr)
# You will see: **The following objects are masked from ‘package:stats’: filter, lag **
# This is becasue dplyr will have it's own filter() function and lag() function which is different from the usual filter function that come with the Base R package.
library(nycflights13)
head(flights)
summary(flights)
# filter() function in dplyr allows us to select a subset of rows in a dataframe -- filter by conditions
filter(flights,month == 10, day == 4, carrier =='AA')
# slice() in dplyr
# slice() function  allows us to select rows by the position
slice(flights, 1:15) # selecting first 15 rows
# arrange() in dplyr
# arrange() function works similar to filter() function except that instead of filtering or selcting rows, it reorder the rows
arrange(flights,year,month,day, arr_time)
head(arrange(flights,year,month,day,arr_time))
# if I want to use the descending time instead of accending time,
head(arrange(flights,year,month,day, desc(arr_time)))
# sample_n() in dplyr
# sample_n() function allows us to pick random number of rows that we wish to choose:
sample_n(flights, 15) # random 15 rows.
class(flight)
class(flights)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
df_EPI = dataframe(EPI)
df_EPI = data.frame(EPI)
# (1) sample_n() ==> pick random number of rows that we wish to choose:
# random 5 rows
sample_n(df_EPI, 5)
df_DALY = data.frame(DALY)
# (1) sample_n() ==> pick random number of rows that we wish to choose:
# random 5 rows
sample_n(df_EPI, 5)
sample_n(DALY, 5)
sample_n(df_DALY, 5)
# (2) sample_frac() ==> pick a percentage of rows
# sample with a 10% of rows from the total number of rows
sample_frac(df_EPI, 0.1)
sample_frac(df_DALY, 0.1) )
sample_frac(df_DALY, 0.1)
knitr::opts_chunk$set(echo = TRUE)
df_EPI = data.frame(EPI)
df_DALY = data.frame(DALY)
# (1) sample_n() ==> pick random number of rows that we wish to choose:
# random 5 rows
sample_n(df_EPI, 5)
sample_n(df_DALY, 5)
# (2) sample_frac() ==> pick a percentage of rows
# sample with a 10% of rows from the total number of rows
sample_frac(df_EPI, 0.1)
sample_frac(df_DALY, 0.1)
df_EPI = data.frame(EPI)
df_DALY = data.frame(DALY)
# (1) sample_n() ==> pick random number of rows that we wish to choose:
# random 5 rows
sample_n(df_EPI, 5)
sample_n(df_DALY, 5)
# (2) sample_frac() ==> pick a percentage of rows
# sample with a 10% of rows from the total number of rows
sample_frac(df_EPI, 0.1)
sample_frac(df_DALY, 0.1)
# (1) sample_n() ==> pick random number of rows that we wish to choose:
# random 5 rows
sample_n(df_EPI, 5)
sample_n(df_DALY, 5)
# (1) sample_n() ==> pick random number of rows that we wish to choose:
# random 5 rows
sample_n(df_EPI, 5, df_DALY, 5)
df_EPI = data.frame(EPI)
df_DALY = data.frame(DALY)
# (1) sample_n() ==> pick random number of rows that we wish to choose:
# random 5 rows
sample_n(df_EPI, 5)
sample_n(df_DALY, 5)
# (2) sample_frac() ==> pick a percentage of rows
# sample with a 10% of rows from the total number of rows
sample_frac(df_EPI, 0.1)
sample_frac(df_DALY, 0.1)
data <- read_csv("EPI_data.csv")
data %>% glimpse()
attach(data)
# shows the mean, median, and quantiles for numeric variables in a data frame
summary(EPI)
summary(DALY)
# shows the mean, median, and quantiles for numeric variables in a data frame
summary(EPI)
summary(DALY)
# shows the mean, median, and quantiles for numeric variables in a data frame
summary(EPI)
summary(DALY)
hist(EPI)
hist(DALY)
# (4)  arrange() and desc() ==> arrange values in the descending order in the EPI and DALY
new_decs_EPI  <- arrange( data, desc(EPI) )
new_decs_DALY <- arrange( data, desc(DALY) )
# (1) create a multilinear regression model
lmENVH <- lm(ENVHEALTH~DALY+AIR_H+WATER_H)
# (2) display the mode
lmENVH
summary( lmENVH )
cENVH<-coef(lmENVH)
# Predict
DALYNEW <- c( seq(5, 95, 5) )
AIR_HNEW <- c( seq(5, 95, 5) )
WATHER_HNEW <- c( seq(5, 95, 5) )
NEW <- dataframe( DALYNEW, AIR_HNEW, WATHER_HNEW )
# Predict
DALYNEW <- c( seq(5, 95, 5) )
AIR_HNEW <- c( seq(5, 95, 5) )
WATHER_HNEW <- c( seq(5, 95, 5) )
NEW <- data.frame( DALYNEW, AIR_HNEW, WATHER_HNEW )
pENV <- predict( lmENVH, NEW, interval = "prediction" )
cENV <- predict( lmENVH, NEW, interval = "confidence" )
NEW<- data.frame(DALYNEW,AIR_HNEW,WATER_H NEW)
NEW <- data.frame( DALYNEW,AIR_HNEW, WATER_H NEW )
NEW <- data.frame( DALYNEW, AIR_HNEW, WATER_H_NEW )
NEW <- data.frame( DALYNEW, AIR_HNEW, WATER_HNEW )
NEW <- data.frame( DALYNEW, AIR_HNEW, WATHER_HNEW )
pENV <- predict( lmENVH,NEW,interval = "prediction" )
cENV <-predict( lmENVH,NEW,interval = "confidence" )
cENVH<-coef(lmENVH)
cENVH
# Predict
DALYNEW <- c( seq(5, 95, 5) )
AIR_HNEW <- c( seq(5, 95, 5) )
WATHER_HNEW <- c( seq(5, 95, 5) )
NEW <- data.frame( DALYNEW, AIR_HNEW, WATHER_HNEW )
pENV <- predict( lmENVH, NEW, interval = "prediction" )
cENV <-predict( lmENVH, NEW, interval = "confidence" )
pENV <- predict( lmENVH, interval = "prediction" )
cENV <-predict( lmENVH, interval = "confidence" )
cENV
pENV <- predict( lmENVH, interval = "prediction" )
cENV <-predict( lmENVH, interval = "confidence" )
head(cENV)
NEW <- data.frame( DALYNEW, AIR_HNEW, WATHER_HNEW )
View(NEW)
pENV <- predict( lmENVH, interval = "prediction" )
head(pENV)
pENV <- predict( lmENVH, DALYNEW, interval = "prediction" )
pENV <- predict( lmENVH, NEW, interval = "prediction" )
pENV <- predict( lmENVH, data.frame( c( seq(5, 95, 5) ), c( seq(5, 95, 5) ), c( seq(5, 95, 5) ) , interval = "prediction" ))
lmpENV <- predict( new_lmENVH, NEW, interval = "prediction" )
NEW <- data.frame( DALYNEW, AIR_HNEW, WATHER_HNEW )
new_lmENVH <-lm(ENVHEALTH~DALY+AIR_H+WATER_H, data = NEW)
lmpENV <- predict( new_lmENVH, NEW, interval = "prediction" )
lm.lmpENV <- predict( new_lmENVH, NEW, interval = "prediction" )
lm.lmpENV <- predict( new_lmENVH, NEW, interval = "prediction" )
df
abalone <- read.csv("abalone.csv", header =T, na.strings=c("","NA"))
suppressWarnings(suppressMessages(library(dplyr)))
#create an sex column that is numeric
abalone <- abalone %>%
mutate(sex_num =case_when(
sex %in% 'M' ~ 0,
sex %in% "F"  ~ 1,
sex %in% "I" ~ 2
))
abalone <- read.csv( "abalone.csv" )
abalone <- read.csv("abalone.csv", header =T, na.strings=c("","NA"))
suppressWarnings(suppressMessages(library(dplyr)))
#create an sex column that is numeric
abalone <- abalone %>%
mutate(sex_num =case_when(
Sex %in% 'M' ~ 0,
Sex %in% "F"  ~ 1,
Sex %in% "I" ~ 2
))
#create an age column
abalone <- abalone %>%
mutate(age=case_when(
rings %in% 1:5 ~ "young",
rings %in% 6:13 ~ "adult",
rings %in% 14:30 ~ "old"
))
View(abalone)
abalone <- read.csv( "abalone.csv" )
abalone <- read.csv("abalone.csv", header =T, na.strings=c("","NA"))
suppressWarnings(suppressMessages(library(dplyr)))
#create an sex column that is numeric
abalone <- abalone %>%
mutate(sex_num =case_when(
Sex %in% 'M' ~ 0,
Sex %in% "F"  ~ 1,
Sex %in% "I" ~ 2
))
#create an age column
abalone <- abalone %>%
mutate(age=case_when(
Rings %in% 1:5 ~ "young",
Rings %in% 6:13 ~ "adult",
Rings %in% 14:30 ~ "old"
))
# remove rings, sex
abalone <- abalone[c(-1, -9)]
str(abalone)
### the dependent variable is age , with the different values young adult old
### standardize the predictors
set.seed(100)
abalone_scale <- data.frame(scale(abalone[1:8]))
### add the target variable to the data set abalone_scale
abalone$age <- as.factor(abalone$age)
abalone_scale  <- cbind(abalone_scale, age = abalone$age)
i <- sample(4177, 2088)
abalone_train <- abalone_scale[i,]
abalone_test <- abalone_scale[-i,]
### we use the tune.knn function in the e1071 package to determine a good K number
### this function performs a 10-fold cross-validation
suppressWarnings(suppressMessages(library(e1071)))
### we use the tune.knn function in the e1071 package to determine a good K number
### this function performs a 10-fold cross-validation
install.packages("e1071")
library(e1071)
t_knn <- tune.knn(abalone_train[,-9], factor(abalone_train[,9]), k = 1:100)
t_knn # names(t_knn) to see the list of variables
View(t_knn)
plot(t_knn)
library(class)
age <- abalone_train$age
pred <- knn(train = abalone_train[,-9], test = abalone_test[,-9], cl = age, k = t_knn$best.parameters)
### get the prediction accuracy in the test set
mean(pred == abalone_test$age)
table(pred,abalone_test$age)
# classification error = 1-accuracy above
ce(abalone_test$age, pred)
data("iris")
iris_dataset<-iris
view(iris)
iris_dataset<-iris[1:4,]
view(iris_dataset)
iris_dataset<-iris[,1:4]
view(iris_dataset)
DALYNEW <- c( seq(5, 95, 5) )
AIR_HNEW <- c( seq(5, 95, 5) )
WATHER_HNEW <- c( seq(5, 95, 5) )
NEW <- data.frame( DALYNEW, AIR_HNEW, WATHER_HNEW )
lm.lmpENV <- predict( new_lmENVH, NEW, interval = "prediction" )
lm.lmpENV <- predict( new_lmENVH, se.fit = TRUE, interval = "prediction" )
lm.lmpENV <- predict(lmENVH, se.fit = TRUE, interval = "prediction" )
lmpENV <- predict(lmENVH, se.fit = TRUE, interval = "prediction" )
lmpENV <- predict(lmENVH, se.fit = TRUE, interval = "prediction" )
DALYNEW <- c( seq(5, 95, 5) )
AIR_HNEW <- c( seq(5, 95, 5) )
WATHER_HNEW <- c( seq(5, 95, 5) )
NEW <- data.frame( DALYNEW, AIR_HNEW, WATHER_HNEW )
lmpENV <- predict(lmENVH, se.fit = TRUE, interval = "prediction" )
pENV <- predict(lmENVH, se.fit = TRUE, interval = "prediction" )
pENV <- predict(lmENVH, se.fit = TRUE, interval = "prediction" )
pENV<- predict(lmENVH,NEW,interval=“prediction”)
pENV<- predict(lmENVH,NEW,interval="prediction")
pENV<- predict(lmENVH,NEW,se.fit = TRUE,interval="prediction")
pENV<- predict(lmENVH,NEW,se.fit = TRUE,interval="prediction",na.action = na.pass)
pENV<- predict(lmENVH,NEW,se.fit = TRUE,interval="prediction",na.action = na.pass)
cENV<-predict(lmENVH,NEW,se.fit = TRUE,interval="confidence",na.action = na.pass)
DALY <- c( seq(5, 95, 5) )
AIR_H <- c( seq(5, 95, 5) )
WATER_H <- c( seq(5, 95, 5) )
NEW <- data.frame( DALYNEW, AIR_HNEW, WATHER_HNEW )
pENV<- predict(lmENVH,NEW,se.fit = TRUE,interval="prediction",na.action = na.pass)
cENV<-predict(lmENVH,NEW,se.fit = TRUE,interval="confidence",na.action = na.pass)
attach(data)
attach(data)
# (1) create a multilinear regression model
lmENVH <- lm(ENVHEALTH~data$DALY+data$AIR_H+data$WATER_H)
# (1) create a multilinear regression model
lmENVH <- lm(ENVHEALTH~data$DALY+data$AIR_H+data$WATER_H)
# (2) display the mode
lmENVH
summary( lmENVH )
cENVH<-coef(lmENVH)
cENVH
DALY <- c( seq(5, 95, 5) )
AIR_H <- c( seq(5, 95, 5) )
WATER_H <- c( seq(5, 95, 5) )
NEW <- data.frame( DALY, AIR_H, WATER_H )
pENV<- predict(lmENVH,NEW,se.fit = TRUE,interval="prediction",na.action = na.pass)
